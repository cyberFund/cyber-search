/* Gradle plugins part */
buildscript {
    ext {
        kotlinVersion = "1.1.50"
        kotlinCoroutinesVersion = "0.18"
        jacksonVersion = "2.8.9"
        undertowVersion = "1.4.20.Final"
        kafkaVersion = "0.11.0.1"
        cassandraConfluentVersion = "3.3.0"
        web3jVersion = "2.3.0"
        apacheHttpClientVersion = "4.1.3"

        // plugins
        dependencyPluginVersion = "1.0.3.RELEASE"
        shadowPluginVersion = "2.0.1"

        // tests
        junitVersion = "5.0.0"
        junitPlatformVersion = "1.0.0"
        mockitoVersion = "2.1.0"
        mockitoKotlinVersion = "0.7.0"

        // logs
        slf4jVersion = "1.7.25"
        lockbackVersion = "1.2.3"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("io.spring.gradle:dependency-management-plugin:$dependencyPluginVersion")
        classpath("org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion")
        classpath("com.github.jengelman.gradle.plugins:shadow:$shadowPluginVersion")
    }
}


subprojects {
    apply plugin: "kotlin"
    apply plugin: "org.junit.platform.gradle.plugin"
    apply plugin: "io.spring.dependency-management"

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        dependencies {
            dependency("org.slf4j:slf4j-api:$slf4jVersion")
            dependency("ch.qos.logback:logback-classic:$lockbackVersion")

            dependency("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
            dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutinesVersion")

            dependency("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
            dependency("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")

            dependency("io.undertow:undertow-core:$undertowVersion")
            dependency("org.apache.httpcomponents:httpasyncclient:$apacheHttpClientVersion")

            dependency("org.apache.kafka:kafka-clients:$kafkaVersion")
            dependency("org.apache.kafka:kafka-streams:$kafkaVersion")

            dependency("org.apache.kafka:connect-api:$kafkaVersion")

            dependency("org.junit.jupiter:junit-jupiter-api:$junitVersion")
            dependency("org.junit.platform:junit-platform-launcher:$junitPlatformVersion")
            dependency("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
            dependency("org.mockito:mockito-core:$mockitoVersion")
            dependency("com.nhaarman:mockito-kotlin:$mockitoKotlinVersion")

            dependency("com.datastax.cassandra:cassandra-driver-core:$cassandraConfluentVersion")
            dependency("com.datastax.cassandra:cassandra-driver-mapping:$cassandraConfluentVersion")
            dependency("com.datastax.cassandra:cassandra-driver-extras:$cassandraConfluentVersion")

            dependency("org.web3j:core:$web3jVersion")
        }
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testCompile("org.junit.platform:junit-platform-launcher")
        testCompile("org.mockito:mockito-core")
        testCompile("com.nhaarman:mockito-kotlin")
        testRuntime("org.junit.jupiter:junit-jupiter-engine")
    }
}


project(":core") {
    dependencies {
        compile("org.slf4j:slf4j-api")
        compile("ch.qos.logback:logback-classic")

        compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")
        compile("org.jetbrains.kotlin:kotlin-reflect")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8")

        compile("com.fasterxml.jackson.core:jackson-databind")
        compile("com.fasterxml.jackson.module:jackson-module-kotlin")

        compile("org.apache.kafka:kafka-clients")
    }
}


project(":search-api") {
    apply plugin: "application"

    dependencies {
        compile(project(":core"))
        compile("io.undertow:undertow-core")
    }

    mainClassName = "fund.cyber.search.SearchApiApplication"
}